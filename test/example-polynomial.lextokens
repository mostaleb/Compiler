[//, // ====== struct declarations ====== //, 1]
[class, class, 2]
[id, POLYNOMIAL, 2]
[{, {, 2]
[public, public, 3]
[function, function, 3]
[id, evaluate, 3]
[:, :, 3]
[(, (, 3]
[id, x, 3]
[:, :, 3]
[float, float, 3]
[), ), 3]
[=>, =>, 3]
[float, float, 3]
[;, ;, 3]
[}, }, 4]
[;, ;, 4]
[class, class, 6]
[id, LINEAR, 6]
[isa, isa, 6]
[id, POLYNOMIAL, 6]
[{, {, 6]
[private, private, 7]
[attribute, attribute, 7]
[id, a, 7]
[:, :, 7]
[float, float, 7]
[;, ;, 7]
[private, private, 8]
[attribute, attribute, 8]
[id, b, 8]
[:, :, 8]
[float, float, 8]
[;, ;, 8]
[public, public, 9]
[constructor, constructor, 9]
[:, :, 9]
[(, (, 9]
[id, A, 9]
[:, :, 9]
[float, float, 9]
[,, ,, 9]
[id, B, 9]
[:, :, 9]
[float, float, 9]
[), ), 9]
[;, ;, 9]
[public, public, 10]
[function, function, 10]
[id, evaluate, 10]
[:, :, 10]
[(, (, 10]
[id, x, 10]
[:, :, 10]
[float, float, 10]
[), ), 10]
[=>, =>, 10]
[float, float, 10]
[;, ;, 10]
[}, }, 11]
[;, ;, 11]
[class, class, 13]
[id, QUADRATIC, 13]
[isa, isa, 13]
[id, POLYNOMIAL, 13]
[{, {, 13]
[private, private, 14]
[attribute, attribute, 14]
[id, a, 14]
[:, :, 14]
[float, float, 14]
[;, ;, 14]
[private, private, 15]
[attribute, attribute, 15]
[id, b, 15]
[:, :, 15]
[float, float, 15]
[;, ;, 15]
[private, private, 16]
[attribute, attribute, 16]
[id, c, 16]
[:, :, 16]
[float, float, 16]
[;, ;, 16]
[public, public, 17]
[constructor, constructor, 17]
[:, :, 17]
[(, (, 17]
[id, A, 17]
[:, :, 17]
[float, float, 17]
[,, ,, 17]
[id, B, 17]
[:, :, 17]
[float, float, 17]
[,, ,, 17]
[id, C, 17]
[:, :, 17]
[float, float, 17]
[), ), 17]
[;, ;, 17]
[public, public, 18]
[function, function, 18]
[id, evaluate, 18]
[:, :, 18]
[(, (, 18]
[id, x, 18]
[:, :, 18]
[float, float, 18]
[), ), 18]
[=>, =>, 18]
[float, float, 18]
[;, ;, 18]
[}, }, 19]
[;, ;, 19]
[//, // ====== member function implementations ====== //  , 21]
[function, function, 22]
[id, POLYNOMIAL, 22]
[::, ::, 22]
[id, evaluate, 22]
[(, (, 22]
[id, x, 22]
[:, :, 22]
[float, float, 22]
[), ), 22]
[=>, =>, 22]
[float, float, 22]
[{, {, 23]
[return, return, 24]
[(, (, 24]
[integer, 0, 24]
[), ), 24]
[;, ;, 24]
[}, }, 25]
[function, function, 27]
[id, QUADRATIC, 27]
[::, ::, 27]
[id, evaluate, 27]
[(, (, 27]
[id, x, 27]
[:, :, 27]
[float, float, 27]
[), ), 27]
[=>, =>, 27]
[float, float, 27]
[{, {, 28]
[localvar, localvar, 29]
[id, result, 29]
[:, :, 29]
[float, float, 29]
[;, ;, 29]
[//, //Using Horner's method, 30]
[id, result, 31]
[=, =, 31]
[id, a, 31]
[;, ;, 31]
[id, result, 32]
[=, =, 32]
[id, result, 32]
[*, *, 32]
[id, x, 32]
[+, +, 32]
[id, b, 32]
[;, ;, 32]
[id, result, 33]
[=, =, 33]
[id, result, 33]
[*, *, 33]
[id, x, 33]
[+, +, 33]
[id, c, 33]
[;, ;, 33]
[return, return, 34]
[(, (, 34]
[id, result, 34]
[), ), 34]
[;, ;, 34]
[}, }, 35]
[function, function, 37]
[id, QUADRATIC, 37]
[::, ::, 37]
[constructor, constructor, 37]
[(, (, 37]
[id, A, 37]
[:, :, 37]
[float, float, 37]
[,, ,, 37]
[id, B, 37]
[:, :, 37]
[float, float, 37]
[,, ,, 37]
[id, C, 37]
[:, :, 37]
[float, float, 37]
[), ), 37]
[{, {, 38]
[self, self, 39]
[., ., 39]
[id, a, 39]
[=, =, 39]
[id, A, 39]
[;, ;, 39]
[self, self, 40]
[., ., 40]
[id, b, 40]
[=, =, 40]
[id, B, 40]
[;, ;, 40]
[self, self, 41]
[., ., 41]
[id, c, 41]
[=, =, 41]
[id, C, 41]
[;, ;, 41]
[}, }, 42]
[function, function, 44]
[id, LINEAR, 44]
[::, ::, 44]
[constructor, constructor, 44]
[(, (, 44]
[id, A, 44]
[:, :, 44]
[float, float, 44]
[,, ,, 44]
[id, B, 44]
[:, :, 44]
[float, float, 44]
[), ), 44]
[{, {, 45]
[self, self, 46]
[., ., 46]
[id, a, 46]
[=, =, 46]
[id, A, 46]
[;, ;, 46]
[self, self, 47]
[., ., 47]
[id, b, 47]
[=, =, 47]
[id, B, 47]
[;, ;, 47]
[}, }, 48]
[function, function, 50]
[id, LINEAR, 50]
[::, ::, 50]
[id, evaluate, 50]
[(, (, 50]
[id, x, 50]
[:, :, 50]
[float, float, 50]
[), ), 50]
[=>, =>, 50]
[float, float, 50]
[{, {, 51]
[localvar, localvar, 52]
[id, result, 52]
[:, :, 52]
[float, float, 52]
[;, ;, 52]
[id, result, 53]
[=, =, 53]
[float, 0.0, 53]
[;, ;, 53]
[id, result, 54]
[=, =, 54]
[id, a, 54]
[*, *, 54]
[id, x, 54]
[+, +, 54]
[id, b, 54]
[;, ;, 54]
[return, return, 55]
[(, (, 55]
[id, result, 55]
[), ), 55]
[;, ;, 55]
[}, }, 56]
[//, // ====== main ====== //, 58]
[function, function, 59]
[id, main, 59]
[(, (, 59]
[), ), 59]
[=>, =>, 59]
[void, void, 59]
[{, {, 60]
[localvar, localvar, 61]
[id, f1, 61]
[:, :, 61]
[id, LINEAR, 61]
[(, (, 61]
[integer, 2, 61]
[,, ,, 61]
[float, 3.5, 61]
[), ), 61]
[;, ;, 61]
[localvar, localvar, 62]
[id, f2, 62]
[:, :, 62]
[id, QUADRATIC, 62]
[(, (, 62]
[-, -, 62]
[float, 2.0, 62]
[,, ,, 62]
[float, 1.0, 62]
[,, ,, 62]
[float, 0.0, 62]
[), ), 62]
[;, ;, 62]
[localvar, localvar, 63]
[id, counter, 63]
[:, :, 63]
[integer, integer, 63]
[=, =, 63]
[integer, 1, 63]
[;, ;, 63]
[while, while, 65]
[(, (, 65]
[id, counter, 65]
[<=, <=, 65]
[integer, 10, 65]
[), ), 65]
[{, {, 66]
[write, write, 67]
[(, (, 67]
[id, counter, 67]
[), ), 67]
[;, ;, 67]
[write, write, 68]
[(, (, 68]
[id, f1, 68]
[., ., 68]
[id, evaluate, 68]
[(, (, 68]
[id, counter, 68]
[), ), 68]
[), ), 68]
[;, ;, 68]
[write, write, 69]
[(, (, 69]
[id, f2, 69]
[., ., 69]
[id, evaluate, 69]
[(, (, 69]
[id, counter, 69]
[), ), 69]
[), ), 69]
[;, ;, 69]
[}, }, 70]
[;, ;, 70]
[}, }, 71]
[/**/, /*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/, 72]
