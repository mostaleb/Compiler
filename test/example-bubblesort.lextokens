[/**/, /* sort the array */, 1]
[function, function, 2]
[id, bubbleSort, 2]
[(, (, 2]
[id, arr, 2]
[:, :, 2]
[integer, integer, 2]
[[, [, 2]
[], ], 2]
[,, ,, 2]
[id, size, 2]
[:, :, 2]
[integer, integer, 2]
[), ), 2]
[=>, =>, 2]
[void, void, 2]
[{, {, 3]
[localvar, localvar, 4]
[id, n, 4]
[:, :, 4]
[integer, integer, 4]
[;, ;, 4]
[localvar, localvar, 5]
[id, i, 5]
[:, :, 5]
[integer, integer, 5]
[;, ;, 5]
[localvar, localvar, 6]
[id, j, 6]
[:, :, 6]
[integer, integer, 6]
[;, ;, 6]
[localvar, localvar, 7]
[id, temp, 7]
[:, :, 7]
[integer, integer, 7]
[;, ;, 7]
[id, n, 8]
[=, =, 8]
[id, size, 8]
[;, ;, 8]
[id, i, 9]
[=, =, 9]
[integer, 0, 9]
[;, ;, 9]
[id, j, 10]
[=, =, 10]
[integer, 0, 10]
[;, ;, 10]
[id, temp, 11]
[=, =, 11]
[integer, 0, 11]
[;, ;, 11]
[while, while, 12]
[(, (, 12]
[id, i, 12]
[<, <, 12]
[id, n, 12]
[-, -, 12]
[integer, 1, 12]
[), ), 12]
[{, {, 12]
[while, while, 13]
[(, (, 13]
[id, j, 13]
[<, <, 13]
[id, n, 13]
[-, -, 13]
[id, i, 13]
[-, -, 13]
[integer, 1, 13]
[), ), 13]
[{, {, 13]
[if, if, 14]
[(, (, 14]
[id, arr, 14]
[[, [, 14]
[id, j, 14]
[], ], 14]
[>, >, 14]
[id, arr, 14]
[[, [, 14]
[id, j, 14]
[+, +, 14]
[integer, 1, 14]
[], ], 14]
[), ), 14]
[then, then, 15]
[{, {, 15]
[//, // swap temp and arr[i], 16]
[id, temp, 16]
[=, =, 16]
[id, arr, 16]
[[, [, 16]
[id, j, 16]
[], ], 16]
[;, ;, 16]
[id, arr, 17]
[[, [, 17]
[id, j, 17]
[], ], 17]
[=, =, 17]
[id, arr, 17]
[[, [, 17]
[id, j, 17]
[+, +, 17]
[integer, 1, 17]
[], ], 17]
[;, ;, 17]
[id, arr, 18]
[[, [, 18]
[id, j, 18]
[+, +, 18]
[integer, 1, 18]
[], ], 18]
[=, =, 18]
[id, temp, 18]
[;, ;, 18]
[}, }, 19]
[else, else, 19]
[;, ;, 19]
[id, j, 20]
[=, =, 20]
[id, j, 20]
[+, +, 20]
[integer, 1, 20]
[;, ;, 20]
[}, }, 21]
[;, ;, 21]
[id, i, 22]
[=, =, 22]
[id, i, 22]
[+, +, 22]
[integer, 1, 22]
[;, ;, 22]
[}, }, 23]
[;, ;, 23]
[}, }, 24]
[/**/, /* print the array */, 26]
[function, function, 27]
[id, printArray, 27]
[(, (, 27]
[id, arr, 27]
[:, :, 27]
[integer, integer, 27]
[[, [, 27]
[], ], 27]
[,, ,, 27]
[id, size, 27]
[:, :, 27]
[integer, integer, 27]
[), ), 27]
[=>, =>, 27]
[void, void, 27]
[{, {, 28]
[localvar, localvar, 29]
[id, n, 29]
[:, :, 29]
[integer, integer, 29]
[;, ;, 29]
[localvar, localvar, 30]
[id, i, 30]
[:, :, 30]
[integer, integer, 30]
[;, ;, 30]
[id, n, 31]
[=, =, 31]
[id, size, 31]
[;, ;, 31]
[id, i, 32]
[=, =, 32]
[integer, 0, 32]
[;, ;, 32]
[while, while, 33]
[(, (, 33]
[id, i, 33]
[<, <, 33]
[id, n, 33]
[), ), 33]
[{, {, 33]
[write, write, 34]
[(, (, 34]
[id, arr, 34]
[[, [, 34]
[id, i, 34]
[], ], 34]
[), ), 34]
[;, ;, 34]
[id, i, 35]
[=, =, 35]
[id, i, 35]
[+, +, 35]
[integer, 1, 35]
[;, ;, 35]
[}, }, 36]
[;, ;, 36]
[}, }, 37]
[//, // main funtion to test above, 39]
[function, function, 39]
[id, main, 39]
[(, (, 39]
[), ), 39]
[=>, =>, 39]
[void, void, 39]
[{, {, 40]
[localvar, localvar, 41]
[id, arr, 41]
[:, :, 41]
[integer, integer, 41]
[[, [, 41]
[integer, 7, 41]
[], ], 41]
[;, ;, 41]
[id, arr, 42]
[[, [, 42]
[integer, 0, 42]
[], ], 42]
[=, =, 42]
[integer, 64, 42]
[;, ;, 42]
[id, arr, 43]
[[, [, 43]
[integer, 1, 43]
[], ], 43]
[=, =, 43]
[integer, 34, 43]
[;, ;, 43]
[id, arr, 44]
[[, [, 44]
[integer, 2, 44]
[], ], 44]
[=, =, 44]
[integer, 25, 44]
[;, ;, 44]
[id, arr, 45]
[[, [, 45]
[integer, 3, 45]
[], ], 45]
[=, =, 45]
[integer, 12, 45]
[;, ;, 45]
[id, arr, 46]
[[, [, 46]
[integer, 4, 46]
[], ], 46]
[=, =, 46]
[integer, 22, 46]
[;, ;, 46]
[id, arr, 47]
[[, [, 47]
[integer, 5, 47]
[], ], 47]
[=, =, 47]
[integer, 11, 47]
[;, ;, 47]
[id, arr, 48]
[[, [, 48]
[integer, 6, 48]
[], ], 48]
[=, =, 48]
[integer, 90, 48]
[;, ;, 48]
[id, printarray, 49]
[(, (, 49]
[id, arr, 49]
[,, ,, 49]
[integer, 7, 49]
[), ), 49]
[;, ;, 49]
[id, bubbleSort, 50]
[(, (, 50]
[id, arr, 50]
[,, ,, 50]
[integer, 7, 50]
[), ), 50]
[;, ;, 50]
[id, printarray, 51]
[(, (, 51]
[id, arr, 51]
[,, ,, 51]
[integer, 7, 51]
[), ), 51]
[;, ;, 51]
[}, }, 52]
[/**/, /*\n    classes\n    --------------------------------------\n|X| no class declaration\n| | class declaration\n| | multiple class declarations\n| | no data member declaration\n| | data member declaration\n| | multiple data member declaration\n| | no member function declaration\n| | member function declaration\n| | multiple member function declaration\n| | no member\n| | no inherited class\n| | one inherited class\n| | multiple inherited classes\n| | private member specifier\n| | public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n| | no free function definition\n|X| free function definition\n|X| multiple free function definitions\n|X| no member function definition\n| | member function definition\n| | multiple member function definitions\n|X| return type: void\n| | return type: integer\n| | return type: float\n| | return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n|X| type: integer\n| | type: float\n| | type: id\n|X| type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n|X| type: array (without size)\n\n    functions: calls\n    --------------------------------------\n|X| free function call\n| | member function call\n| | parameters:0\n| | parameters:1\n|X| parameters:n\n|X| array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n| | function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n|X| type: integer\n| | type: float\n| | type: string\n| | type: id\n|X| type: 1-dim array \n| | type: n-dim array\n|X| type: array (with size)\n| | type: array (without size) (not allowed)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n|X| if statement\n|X| if: empty then or else blocks\n| | if: 1-statement then or else blocks\n|X| if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n| | id.id\n| | id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n|X| single variable\n|X| involving addop\n| | involving multop\n|X| involving relop\n| | involving addop + multop\n|X| involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parentheses\n| | involving not\n| | involving sign\n|X| involving literals\n| | involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/, 54]
