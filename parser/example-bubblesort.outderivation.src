
funcHead -> function id
funcHeadTail -> (
fParams -> id :
Type -> integer
arraySize -> [
arraySize2 -> ]
fParamsTail -> , id :
Type -> integer
funcHeadTail -> ) =>
returnType -> void
funcBody -> {
localVarDecl -> localvar id :
Type -> integer
localVarDecl -> ; localvar id :
Type -> integer
localVarDecl -> ; localvar id :
Type -> integer
localVarDecl -> ; localvar id :
Type -> integer
localVarDecl -> ;
statement -> id
assignOp -> =
factor -> id
statement -> ; id
assignOp -> =
factor -> integer
statement -> ; id
assignOp -> =
factor -> integer
statement -> ; id
assignOp -> =
factor -> integer
statement -> ; while (
factor -> id
relOp -> <
factor -> id
addOp -> -
factor -> integer
statement -> )
statBlock -> {
statement -> while (
factor -> id
relOp -> <
factor -> id
addOp -> -
factor -> id
addOp -> -
factor -> integer
statement -> )
statBlock -> {
statement -> if (
factor -> id
indice -> [
factor -> id
indice -> ]
relOp -> >
factor -> id
indice -> [
factor -> id
addOp -> +
factor -> integer
indice -> ]
statement -> ) then
statBlock -> {
statement -> id
assignOp -> =
factor -> id
indice -> [
factor -> id
indice -> ]
statement -> ; id
indice -> [
factor -> id
indice -> ]
assignOp -> =
factor -> id
indice -> [
factor -> id
addOp -> +
factor -> integer
indice -> ]
statement -> ; id
indice -> [
factor -> id
addOp -> +
factor -> integer
indice -> ]
assignOp -> =
factor -> id
statement -> ;
statBlock -> }
statement -> else ; id
assignOp -> =
factor -> id
addOp -> +
factor -> integer
statement -> ;
statBlock -> }
statement -> ; id
assignOp -> =
factor -> id
addOp -> +
factor -> integer
statement -> ;
statBlock -> }
statement -> ;
funcBody -> }
funcHead -> function id
funcHeadTail -> (
fParams -> id :
Type -> integer
arraySize -> [
arraySize2 -> ]
fParamsTail -> , id :
Type -> integer
funcHeadTail -> ) =>
returnType -> void
funcBody -> {
localVarDecl -> localvar id :
Type -> integer
localVarDecl -> ; localvar id :
Type -> integer
localVarDecl -> ;
statement -> id
assignOp -> =
factor -> id
statement -> ; id
assignOp -> =
factor -> integer
statement -> ; while (
factor -> id
relOp -> <
factor -> id
statement -> )
statBlock -> {
statement -> write (
factor -> id
indice -> [
factor -> id
indice -> ]
statement -> ) ; id
assignOp -> =
factor -> id
addOp -> +
factor -> integer
statement -> ;
statBlock -> }
statement -> ;
funcBody -> }
funcHead -> function id
funcHeadTail -> ( ) =>
returnType -> void
funcBody -> {
localVarDecl -> localvar id :
Type -> integer
arraySize -> [
arraySize2 -> integer ]
localVarDecl -> ;
statement -> id
indice -> [
factor -> integer
indice -> ]
assignOp -> =
factor -> integer
statement -> ; id
indice -> [
factor -> integer
indice -> ]
assignOp -> =
factor -> integer
statement -> ; id
indice -> [
factor -> integer
indice -> ]
assignOp -> =
factor -> integer
statement -> ; id
indice -> [
factor -> integer
indice -> ]
assignOp -> =
factor -> integer
statement -> ; id
indice -> [
factor -> integer
indice -> ]
assignOp -> =
factor -> integer
statement -> ; id
indice -> [
factor -> integer
indice -> ]
assignOp -> =
factor -> integer
statement -> ; id
indice -> [
factor -> integer
indice -> ]
assignOp -> =
factor -> integer
statement -> ; id
statementIdnest -> (
factor -> id
aParamsTail -> ,
factor -> integer
statementIdnest -> )
statement -> ; id
statementIdnest -> (
factor -> id
aParamsTail -> ,
factor -> integer
statementIdnest -> )
statement -> ; id
statementIdnest -> (
factor -> id
aParamsTail -> ,
factor -> integer
statementIdnest -> )
statement -> ;
funcBody -> }
start -> eof