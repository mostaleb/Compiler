START -> rept-START0 

aParams -> expr rept-aParams1 
aParams -> EPSILON 

aParamsTail -> ',' expr 

addOp -> '+' 
addOp -> '-' 
addOp -> 'or' 

 

arraySize -> '[' arraySize1
arraySize1 -> 'intLit' ']' 
arraySize1 -> ']' 

assignOp -> '=' 



classDecl -> 'class' 'id' opt-classDecl2 '{' rept-classDecl4 '}' ';' 

classDeclOrFuncDef -> classDecl 
classDeclOrFuncDef -> funcDef 

expr -> arithExpr x

x -> relOp arithExpr
x -> EPSILON

arithExpr -> term rightrec-arithExpr

relExpr -> arithExpr relOp arithExpr

fParams -> 'id' ':' type rept-fParams3 rept-fParams4 
fParams -> EPSILON 

fParamsTail -> ',' 'id' ':' type rept-fParamsTail4 

factor -> rept-variable0 temp1
factor -> 'intLit' 
factor -> 'floatLit' 
factor -> '(' arithExpr ')' 
factor -> 'not' factor 
factor -> sign factor 

temp1 -> 'id' temp2

temp2 -> rept-variable2
temp2 -> '(' aParams ')'

funcBody -> '{' rept-funcBody1 '}' 

funcDef -> funcHead funcBody 

funcHead -> 'function' 'id' funcHead1

funcHead1 -> '(' fParams ')' 'arrow' returnType
funcHead1 -> 'sr' funcHead2

funcHead2 -> 'id' '(' fParams ')' 'arrow' returnType
funcHead2 -> 'constructor' '(' fParams ')'

idnest -> 'id' idnest1 

idnest1 -> rept-idnest1 '.'
idnest1 -> '(' aParams ')' '.'

indice -> '[' arithExpr ']' 

localVarDecl -> 'localVar' 'id' ':' type localVarDecl1

localVarDecl1 -> rept-localVarDecl4 ';'
localVarDecl1 -> '(' aParams ')' ';' 

localVarDeclOrStmt -> localVarDecl 
localVarDeclOrStmt -> statement 

memberDecl -> memberFuncDecl 
memberDecl -> memberVarDecl 

memberFuncDecl -> 'function' 'id' ':' '(' fParams ')' 'arrow' returnType ';' 
memberFuncDecl -> 'constructor' ':' '(' fParams ')' ';' 

memberVarDecl -> 'attribute' 'id' ':' type rept-memberVarDecl4 ';' 

multOp -> '*' 
multOp -> '/' 
multOp -> 'and' 

opt-classDecl2 -> 'isa' 'id' rept-opt-classDecl22 
opt-classDecl2 -> EPSILON  

relOp -> 'eq' 
relOp -> 'neq' 
relOp -> 'lt' 
relOp -> 'gt' 
relOp -> 'leq' 
relOp -> 'geq' 

rept-START0 -> classDeclOrFuncDef rept-START0 
rept-START0 -> EPSILON 

rept-aParams1 -> aParamsTail rept-aParams1 
rept-aParams1 -> EPSILON 

rept-classDecl4 -> visibility memberDecl rept-classDecl4 
rept-classDecl4 -> EPSILON 

rept-fParams3 -> arraySize rept-fParams3 
rept-fParams3 -> EPSILON 

rept-fParams4 -> fParamsTail rept-fParams4 
rept-fParams4 -> EPSILON 

rept-fParamsTail4 -> arraySize rept-fParamsTail4 
rept-fParamsTail4 -> EPSILON 

rept-funcBody1 -> localVarDeclOrStmt rept-funcBody1 
rept-funcBody1 -> EPSILON 

rept-idnest1 -> indice rept-idnest1 
rept-idnest1 -> EPSILON 

rept-localVarDecl4 -> arraySize rept-localVarDecl4 
rept-localVarDecl4 -> EPSILON 

rept-memberVarDecl4 -> arraySize rept-memberVarDecl4 
rept-memberVarDecl4 -> EPSILON 

rept-opt-classDecl22 -> ',' 'id' rept-opt-classDecl22 
rept-opt-classDecl22 -> EPSILON 

rept-statBlock1 -> statement rept-statBlock1 
rept-statBlock1 -> EPSILON 



rept-variable2 -> indice rept-variable2 
rept-variable2 -> EPSILON 

returnType -> type 
returnType -> 'void' 

rightrec-arithExpr -> EPSILON 
rightrec-arithExpr -> addOp term rightrec-arithExpr 

rightrec-term -> EPSILON 
rightrec-term -> multOp factor rightrec-term 

sign -> '+' 
sign -> '-' 

statBlock -> '{' rept-statBlock1 '}' 
statBlock -> statement 
statBlock -> EPSILON 

statement -> rept-variable0 t1 ';' 
statement -> 'if' '(' relExpr ')' 'then' statBlock 'else' statBlock ';' 
statement -> 'while' '(' relExpr ')' statBlock ';' 
statement -> 'read' '(' variable ')' ';' 
statement -> 'write' '(' expr ')' ';' 
statement -> 'return' '(' expr ')' ';'

t1 -> 'id' t2

t2 -> rept-variable2 assignOp expr
t2 -> '(' aParams ')'


variable -> rept-variable0 'id' rept-variable2 

rept-variable0 -> rept-variable0 idnest  
rept-variable0 -> EPSILON 

term -> factor rightrec-term 

type -> 'integer' 
type -> 'float' 
type -> 'id' 



visibility -> 'public' 
visibility -> 'private' 
visibility -> EPSILON 


